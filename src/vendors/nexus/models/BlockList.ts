/* tslint:disable */
/* eslint-disable */
/**
 * Oasis Nexus API V1
 * An API for accessing indexed data from the Oasis Network.  <!-- Acts as a separator after search in sidebar --> # Endpoints 
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { BlockListAllOfBlocks } from './BlockListAllOfBlocks';
import {
    BlockListAllOfBlocksFromJSON,
    BlockListAllOfBlocksFromJSONTyped,
    BlockListAllOfBlocksToJSON,
    BlockListAllOfBlocksToJSONTyped,
} from './BlockListAllOfBlocks';

/**
 * A list of consensus blocks.
 * 
 * @export
 * @interface BlockList
 */
export interface BlockList {
    /**
     * The total number of records that match the query, i.e. the number of records
     * the query would return with limit=infinity.
     * 
     * @type {number}
     * @memberof BlockList
     */
    total_count: number;
    /**
     * Whether total_count is clipped for performance reasons.
     * @type {boolean}
     * @memberof BlockList
     */
    is_total_count_clipped: boolean;
    /**
     * 
     * @type {Array<BlockListAllOfBlocks>}
     * @memberof BlockList
     */
    blocks: Array<BlockListAllOfBlocks>;
}

/**
 * Check if a given object implements the BlockList interface.
 */
export function instanceOfBlockList(value: object): value is BlockList {
    if (!('total_count' in value) || value['total_count'] === undefined) return false;
    if (!('is_total_count_clipped' in value) || value['is_total_count_clipped'] === undefined) return false;
    if (!('blocks' in value) || value['blocks'] === undefined) return false;
    return true;
}

export function BlockListFromJSON(json: any): BlockList {
    return BlockListFromJSONTyped(json, false);
}

export function BlockListFromJSONTyped(json: any, ignoreDiscriminator: boolean): BlockList {
    if (json == null) {
        return json;
    }
    return {
        
        'total_count': json['total_count'],
        'is_total_count_clipped': json['is_total_count_clipped'],
        'blocks': ((json['blocks'] as Array<any>).map(BlockListAllOfBlocksFromJSON)),
    };
}

export function BlockListToJSON(json: any): BlockList {
    return BlockListToJSONTyped(json, false);
}

export function BlockListToJSONTyped(value?: BlockList | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'total_count': value['total_count'],
        'is_total_count_clipped': value['is_total_count_clipped'],
        'blocks': ((value['blocks'] as Array<any>).map(BlockListAllOfBlocksToJSON)),
    };
}

