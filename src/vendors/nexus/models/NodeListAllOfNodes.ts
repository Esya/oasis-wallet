/* tslint:disable */
/* eslint-disable */
/**
 * Oasis Nexus API V1
 * An API for accessing indexed data from the Oasis Network.  <!-- Acts as a separator after search in sidebar --> # Endpoints 
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
/**
 * 
 * @export
 * @interface NodeListAllOfNodes
 */
export interface NodeListAllOfNodes {
    /**
     * The public key identifying this node.
     * @type {string}
     * @memberof NodeListAllOfNodes
     */
    id: string;
    /**
     * The public key identifying the entity controlling this node.
     * 
     * @type {string}
     * @memberof NodeListAllOfNodes
     */
    entity_id: string;
    /**
     * The epoch in which this node's commitment expires.
     * @type {number}
     * @memberof NodeListAllOfNodes
     */
    expiration: number;
    /**
     * The public key used for establishing TLS connections.
     * @type {string}
     * @memberof NodeListAllOfNodes
     */
    tls_pubkey: string;
    /**
     * The public key that will be used for establishing TLS connections
     * upon rotation.
     * 
     * @type {string}
     * @memberof NodeListAllOfNodes
     */
    tls_next_pubkey: string;
    /**
     * The unique identifier of this node on the P2P transport.
     * @type {string}
     * @memberof NodeListAllOfNodes
     */
    p2p_pubkey: string;
    /**
     * The unique identifier of this node as a consensus member
     * @type {string}
     * @memberof NodeListAllOfNodes
     */
    consensus_pubkey: string;
    /**
     * A bitmask representing this node's roles.
     * @type {string}
     * @memberof NodeListAllOfNodes
     */
    roles: string;
}

/**
 * Check if a given object implements the NodeListAllOfNodes interface.
 */
export function instanceOfNodeListAllOfNodes(value: object): value is NodeListAllOfNodes {
    if (!('id' in value) || value['id'] === undefined) return false;
    if (!('entity_id' in value) || value['entity_id'] === undefined) return false;
    if (!('expiration' in value) || value['expiration'] === undefined) return false;
    if (!('tls_pubkey' in value) || value['tls_pubkey'] === undefined) return false;
    if (!('tls_next_pubkey' in value) || value['tls_next_pubkey'] === undefined) return false;
    if (!('p2p_pubkey' in value) || value['p2p_pubkey'] === undefined) return false;
    if (!('consensus_pubkey' in value) || value['consensus_pubkey'] === undefined) return false;
    if (!('roles' in value) || value['roles'] === undefined) return false;
    return true;
}

export function NodeListAllOfNodesFromJSON(json: any): NodeListAllOfNodes {
    return NodeListAllOfNodesFromJSONTyped(json, false);
}

export function NodeListAllOfNodesFromJSONTyped(json: any, ignoreDiscriminator: boolean): NodeListAllOfNodes {
    if (json == null) {
        return json;
    }
    return {
        
        'id': json['id'],
        'entity_id': json['entity_id'],
        'expiration': json['expiration'],
        'tls_pubkey': json['tls_pubkey'],
        'tls_next_pubkey': json['tls_next_pubkey'],
        'p2p_pubkey': json['p2p_pubkey'],
        'consensus_pubkey': json['consensus_pubkey'],
        'roles': json['roles'],
    };
}

export function NodeListAllOfNodesToJSON(json: any): NodeListAllOfNodes {
    return NodeListAllOfNodesToJSONTyped(json, false);
}

export function NodeListAllOfNodesToJSONTyped(value?: NodeListAllOfNodes | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'id': value['id'],
        'entity_id': value['entity_id'],
        'expiration': value['expiration'],
        'tls_pubkey': value['tls_pubkey'],
        'tls_next_pubkey': value['tls_next_pubkey'],
        'p2p_pubkey': value['p2p_pubkey'],
        'consensus_pubkey': value['consensus_pubkey'],
        'roles': value['roles'],
    };
}

