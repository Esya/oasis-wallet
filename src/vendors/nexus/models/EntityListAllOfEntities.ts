/* tslint:disable */
/* eslint-disable */
/**
 * Oasis Nexus API V1
 * An API for accessing indexed data from the Oasis Network.  <!-- Acts as a separator after search in sidebar --> # Endpoints 
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
/**
 * 
 * @export
 * @interface EntityListAllOfEntities
 */
export interface EntityListAllOfEntities {
    /**
     * The public key identifying this entity.
     * @type {string}
     * @memberof EntityListAllOfEntities
     */
    id: string;
    /**
     * The staking address belonging to this entity; derived from the entity's public key.
     * @type {string}
     * @memberof EntityListAllOfEntities
     */
    address: string;
    /**
     * The vector of nodes owned by this entity.
     * @type {Array<string>}
     * @memberof EntityListAllOfEntities
     */
    nodes: Array<string>;
}

/**
 * Check if a given object implements the EntityListAllOfEntities interface.
 */
export function instanceOfEntityListAllOfEntities(value: object): value is EntityListAllOfEntities {
    if (!('id' in value) || value['id'] === undefined) return false;
    if (!('address' in value) || value['address'] === undefined) return false;
    if (!('nodes' in value) || value['nodes'] === undefined) return false;
    return true;
}

export function EntityListAllOfEntitiesFromJSON(json: any): EntityListAllOfEntities {
    return EntityListAllOfEntitiesFromJSONTyped(json, false);
}

export function EntityListAllOfEntitiesFromJSONTyped(json: any, ignoreDiscriminator: boolean): EntityListAllOfEntities {
    if (json == null) {
        return json;
    }
    return {
        
        'id': json['id'],
        'address': json['address'],
        'nodes': json['nodes'],
    };
}

export function EntityListAllOfEntitiesToJSON(json: any): EntityListAllOfEntities {
    return EntityListAllOfEntitiesToJSONTyped(json, false);
}

export function EntityListAllOfEntitiesToJSONTyped(value?: EntityListAllOfEntities | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'id': value['id'],
        'address': value['address'],
        'nodes': value['nodes'],
    };
}

