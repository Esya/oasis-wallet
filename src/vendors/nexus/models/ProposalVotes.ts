/* tslint:disable */
/* eslint-disable */
/**
 * Oasis Nexus API V1
 * An API for accessing indexed data from the Oasis Network.  <!-- Acts as a separator after search in sidebar --> # Endpoints 
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { ProposalVotesAllOfVotes } from './ProposalVotesAllOfVotes';
import {
    ProposalVotesAllOfVotesFromJSON,
    ProposalVotesAllOfVotesFromJSONTyped,
    ProposalVotesAllOfVotesToJSON,
    ProposalVotesAllOfVotesToJSONTyped,
} from './ProposalVotesAllOfVotes';

/**
 * 
 * @export
 * @interface ProposalVotes
 */
export interface ProposalVotes {
    /**
     * The total number of records that match the query, i.e. the number of records
     * the query would return with limit=infinity.
     * 
     * @type {number}
     * @memberof ProposalVotes
     */
    total_count: number;
    /**
     * Whether total_count is clipped for performance reasons.
     * @type {boolean}
     * @memberof ProposalVotes
     */
    is_total_count_clipped: boolean;
    /**
     * The unique identifier of the proposal.
     * @type {number}
     * @memberof ProposalVotes
     */
    proposal_id: number;
    /**
     * The list of votes for the proposal.
     * @type {Array<ProposalVotesAllOfVotes>}
     * @memberof ProposalVotes
     */
    votes: Array<ProposalVotesAllOfVotes>;
}

/**
 * Check if a given object implements the ProposalVotes interface.
 */
export function instanceOfProposalVotes(value: object): value is ProposalVotes {
    if (!('total_count' in value) || value['total_count'] === undefined) return false;
    if (!('is_total_count_clipped' in value) || value['is_total_count_clipped'] === undefined) return false;
    if (!('proposal_id' in value) || value['proposal_id'] === undefined) return false;
    if (!('votes' in value) || value['votes'] === undefined) return false;
    return true;
}

export function ProposalVotesFromJSON(json: any): ProposalVotes {
    return ProposalVotesFromJSONTyped(json, false);
}

export function ProposalVotesFromJSONTyped(json: any, ignoreDiscriminator: boolean): ProposalVotes {
    if (json == null) {
        return json;
    }
    return {
        
        'total_count': json['total_count'],
        'is_total_count_clipped': json['is_total_count_clipped'],
        'proposal_id': json['proposal_id'],
        'votes': ((json['votes'] as Array<any>).map(ProposalVotesAllOfVotesFromJSON)),
    };
}

export function ProposalVotesToJSON(json: any): ProposalVotes {
    return ProposalVotesToJSONTyped(json, false);
}

export function ProposalVotesToJSONTyped(value?: ProposalVotes | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'total_count': value['total_count'],
        'is_total_count_clipped': value['is_total_count_clipped'],
        'proposal_id': value['proposal_id'],
        'votes': ((value['votes'] as Array<any>).map(ProposalVotesAllOfVotesToJSON)),
    };
}

