/* tslint:disable */
/* eslint-disable */
/**
 * Oasis Nexus API V1
 * An API for accessing indexed data from the Oasis Network.  <!-- Acts as a separator after search in sidebar --> # Endpoints 
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { RoothashMessageType } from './RoothashMessageType';
import {
    RoothashMessageTypeFromJSON,
    RoothashMessageTypeFromJSONTyped,
    RoothashMessageTypeToJSON,
    RoothashMessageTypeToJSONTyped,
} from './RoothashMessageType';

/**
 * 
 * @export
 * @interface RoothashMessage
 */
export interface RoothashMessage {
    /**
     * The runtime that sent this message.
     * 
     * @type {string}
     * @memberof RoothashMessage
     */
    runtime: string;
    /**
     * The block round when the runtime sent this message.
     * 
     * @type {number}
     * @memberof RoothashMessage
     */
    round: number;
    /**
     * The 0-based index of this message in the block.
     * 
     * @type {number}
     * @memberof RoothashMessage
     */
    index: number;
    /**
     * The type of thies message.
     * 
     * @type {RoothashMessageType}
     * @memberof RoothashMessage
     */
    type?: RoothashMessageType;
    /**
     * The "body" of a message is a structure within the
     * `github.com/oasisprotocol/oasis-core/go/roothash/api/message`
     * `Message` structure
     * (https://pkg.go.dev/github.com/oasisprotocol/oasis-core/go/roothash/api/message#Message).
     * For example, if the type is `staking.withdraw`, the body is the Go
     * `Message` structure's `.Staking.Withdraw` field, which is a
     * `github.com/oasisprotocol/oasis-core/go/staking/api` `Withdraw`
     * structure
     * (https://pkg.go.dev/github.com/oasisprotocol/oasis-core/go/staking/api#Withdraw),
     * with `from` and `amount` fields in JSON.
     * 
     * @type {object}
     * @memberof RoothashMessage
     */
    body?: object;
    /**
     * If executing this message resulted in an error, this is the
     * error's module.
     * 
     * @type {string}
     * @memberof RoothashMessage
     */
    error_module?: string;
    /**
     * If executing this message resulted in an error, this is the
     * error's code.
     * 
     * @type {number}
     * @memberof RoothashMessage
     */
    error_code?: number;
    /**
     * A result value that consensus provided after executing this
     * message. These aren't centrally registered anywhere, so look at
     * the consensus apps' `ExecuteMessage`
     * (https://pkg.go.dev/github.com/oasisprotocol/oasis-core/go/consensus/cometbft/api#MessageSubscriber)
     * implementations to see what they return. For example, a
     * `staking.withdraw` type message gives a
     * `github.com/oasisprotocol/oasis-core/go/staking/api`
     * `WithdrawResult` structure as its result
     * (`https://pkg.go.dev/github.com/oasisprotocol/oasis-core/go/staking/api#WithdrawResult`)
     * with `owner`, `beneficiary`, `allowance`, and `amount_change`
     * fields.
     * 
     * @type {any}
     * @memberof RoothashMessage
     */
    result?: any | null;
}



/**
 * Check if a given object implements the RoothashMessage interface.
 */
export function instanceOfRoothashMessage(value: object): value is RoothashMessage {
    if (!('runtime' in value) || value['runtime'] === undefined) return false;
    if (!('round' in value) || value['round'] === undefined) return false;
    if (!('index' in value) || value['index'] === undefined) return false;
    return true;
}

export function RoothashMessageFromJSON(json: any): RoothashMessage {
    return RoothashMessageFromJSONTyped(json, false);
}

export function RoothashMessageFromJSONTyped(json: any, ignoreDiscriminator: boolean): RoothashMessage {
    if (json == null) {
        return json;
    }
    return {
        
        'runtime': json['runtime'],
        'round': json['round'],
        'index': json['index'],
        'type': json['type'] == null ? undefined : RoothashMessageTypeFromJSON(json['type']),
        'body': json['body'] == null ? undefined : json['body'],
        'error_module': json['error_module'] == null ? undefined : json['error_module'],
        'error_code': json['error_code'] == null ? undefined : json['error_code'],
        'result': json['result'] == null ? undefined : json['result'],
    };
}

export function RoothashMessageToJSON(json: any): RoothashMessage {
    return RoothashMessageToJSONTyped(json, false);
}

export function RoothashMessageToJSONTyped(value?: RoothashMessage | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'runtime': value['runtime'],
        'round': value['round'],
        'index': value['index'],
        'type': RoothashMessageTypeToJSON(value['type']),
        'body': value['body'],
        'error_module': value['error_module'],
        'error_code': value['error_code'],
        'result': value['result'],
    };
}

