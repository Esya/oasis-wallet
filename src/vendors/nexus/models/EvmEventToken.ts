/* tslint:disable */
/* eslint-disable */
/**
 * Oasis Nexus API V1
 * An API for accessing indexed data from the Oasis Network.  <!-- Acts as a separator after search in sidebar --> # Endpoints 
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { EvmTokenType } from './EvmTokenType';
import {
    EvmTokenTypeFromJSON,
    EvmTokenTypeFromJSONTyped,
    EvmTokenTypeToJSON,
    EvmTokenTypeToJSONTyped,
} from './EvmTokenType';

/**
 * Details about the EVM token involved in the event, if any.
 * 
 * @export
 * @interface EvmEventToken
 */
export interface EvmEventToken {
    /**
     * 
     * @type {EvmTokenType}
     * @memberof EvmEventToken
     */
    type?: EvmTokenType;
    /**
     * Symbol of the token, as provided by token contract's `symbol()` method.
     * @type {string}
     * @memberof EvmEventToken
     */
    symbol?: string;
    /**
     * The number of least significant digits in base units that should be displayed as
     * decimals when displaying tokens. `tokens = base_units / (10**decimals)`.
     * Affects display only. Often equals 18, to match ETH.
     * 
     * @type {number}
     * @memberof EvmEventToken
     */
    decimals?: number;
}



/**
 * Check if a given object implements the EvmEventToken interface.
 */
export function instanceOfEvmEventToken(value: object): value is EvmEventToken {
    return true;
}

export function EvmEventTokenFromJSON(json: any): EvmEventToken {
    return EvmEventTokenFromJSONTyped(json, false);
}

export function EvmEventTokenFromJSONTyped(json: any, ignoreDiscriminator: boolean): EvmEventToken {
    if (json == null) {
        return json;
    }
    return {
        
        'type': json['type'] == null ? undefined : EvmTokenTypeFromJSON(json['type']),
        'symbol': json['symbol'] == null ? undefined : json['symbol'],
        'decimals': json['decimals'] == null ? undefined : json['decimals'],
    };
}

export function EvmEventTokenToJSON(json: any): EvmEventToken {
    return EvmEventTokenToJSONTyped(json, false);
}

export function EvmEventTokenToJSONTyped(value?: EvmEventToken | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'type': EvmTokenTypeToJSON(value['type']),
        'symbol': value['symbol'],
        'decimals': value['decimals'],
    };
}

