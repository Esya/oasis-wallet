/* tslint:disable */
/* eslint-disable */
/**
 * Oasis Nexus API V1
 * An API for accessing indexed data from the Oasis Network.  <!-- Acts as a separator after search in sidebar --> # Endpoints 
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { Escrow } from './Escrow';
import {
    EscrowFromJSON,
    EscrowFromJSONTyped,
    EscrowToJSON,
    EscrowToJSONTyped,
} from './Escrow';
import type { ValidatorMedia } from './ValidatorMedia';
import {
    ValidatorMediaFromJSON,
    ValidatorMediaFromJSONTyped,
    ValidatorMediaToJSON,
    ValidatorMediaToJSONTyped,
} from './ValidatorMedia';
import type { ValidatorCommissionBound } from './ValidatorCommissionBound';
import {
    ValidatorCommissionBoundFromJSON,
    ValidatorCommissionBoundFromJSONTyped,
    ValidatorCommissionBoundToJSON,
    ValidatorCommissionBoundToJSONTyped,
} from './ValidatorCommissionBound';

/**
 * An validator registered at the consensus layer.
 * 
 * @export
 * @interface Validator
 */
export interface Validator {
    /**
     * The staking address identifying this validator.
     * @type {string}
     * @memberof Validator
     */
    entity_address: string;
    /**
     * The public key identifying this validator.
     * @type {string}
     * @memberof Validator
     */
    entity_id: string;
    /**
     * The public key identifying this validator's node.
     * @type {string}
     * @memberof Validator
     */
    node_id?: string;
    /**
     * The escrow account data for this validator.
     * @type {Escrow}
     * @memberof Validator
     */
    escrow: Escrow;
    /**
     * The voting power of this validator.
     * @type {number}
     * @memberof Validator
     */
    voting_power: number;
    /**
     * The cumulative voting power of this validator and all other validators ranked higher than itself.
     * @type {number}
     * @memberof Validator
     */
    voting_power_cumulative?: number;
    /**
     * Whether the entity has a node that is registered for being a validator, node is up to date, and has successfully registered itself. It may or may not be part of validator set.
     * @type {boolean}
     * @memberof Validator
     */
    active: boolean;
    /**
     * The second-granular consensus time.
     * @type {string}
     * @memberof Validator
     */
    start_date: string;
    /**
     * The rank of the validator, determined by voting power.
     * @type {number}
     * @memberof Validator
     */
    rank: number;
    /**
     * Whether the entity is part of the validator set (top <scheduler.params.max_validators> by stake among active entities).
     * @type {boolean}
     * @memberof Validator
     */
    in_validator_set: boolean;
    /**
     * 
     * @type {ValidatorMedia}
     * @memberof Validator
     */
    media?: ValidatorMedia;
    /**
     * Commission rate.
     * @type {number}
     * @memberof Validator
     */
    current_rate: number;
    /**
     * 
     * @type {ValidatorCommissionBound}
     * @memberof Validator
     */
    current_commission_bound: ValidatorCommissionBound;
}

/**
 * Check if a given object implements the Validator interface.
 */
export function instanceOfValidator(value: object): value is Validator {
    if (!('entity_address' in value) || value['entity_address'] === undefined) return false;
    if (!('entity_id' in value) || value['entity_id'] === undefined) return false;
    if (!('escrow' in value) || value['escrow'] === undefined) return false;
    if (!('voting_power' in value) || value['voting_power'] === undefined) return false;
    if (!('active' in value) || value['active'] === undefined) return false;
    if (!('start_date' in value) || value['start_date'] === undefined) return false;
    if (!('rank' in value) || value['rank'] === undefined) return false;
    if (!('in_validator_set' in value) || value['in_validator_set'] === undefined) return false;
    if (!('current_rate' in value) || value['current_rate'] === undefined) return false;
    if (!('current_commission_bound' in value) || value['current_commission_bound'] === undefined) return false;
    return true;
}

export function ValidatorFromJSON(json: any): Validator {
    return ValidatorFromJSONTyped(json, false);
}

export function ValidatorFromJSONTyped(json: any, ignoreDiscriminator: boolean): Validator {
    if (json == null) {
        return json;
    }
    return {
        
        'entity_address': json['entity_address'],
        'entity_id': json['entity_id'],
        'node_id': json['node_id'] == null ? undefined : json['node_id'],
        'escrow': EscrowFromJSON(json['escrow']),
        'voting_power': json['voting_power'],
        'voting_power_cumulative': json['voting_power_cumulative'] == null ? undefined : json['voting_power_cumulative'],
        'active': json['active'],
        'start_date': json['start_date'],
        'rank': json['rank'],
        'in_validator_set': json['in_validator_set'],
        'media': json['media'] == null ? undefined : ValidatorMediaFromJSON(json['media']),
        'current_rate': json['current_rate'],
        'current_commission_bound': ValidatorCommissionBoundFromJSON(json['current_commission_bound']),
    };
}

export function ValidatorToJSON(json: any): Validator {
    return ValidatorToJSONTyped(json, false);
}

export function ValidatorToJSONTyped(value?: Validator | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'entity_address': value['entity_address'],
        'entity_id': value['entity_id'],
        'node_id': value['node_id'],
        'escrow': EscrowToJSON(value['escrow']),
        'voting_power': value['voting_power'],
        'voting_power_cumulative': value['voting_power_cumulative'],
        'active': value['active'],
        'start_date': value['start_date'],
        'rank': value['rank'],
        'in_validator_set': value['in_validator_set'],
        'media': ValidatorMediaToJSON(value['media']),
        'current_rate': value['current_rate'],
        'current_commission_bound': ValidatorCommissionBoundToJSON(value['current_commission_bound']),
    };
}

